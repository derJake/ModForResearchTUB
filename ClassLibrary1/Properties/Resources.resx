<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="convoy_intro_1" xml:space="preserve">
    <value>In this task you will follow the other transporter.</value>
  </data>
  <data name="convoy_intro_2" xml:space="preserve">
    <value>Try to stay close to it!</value>
  </data>
  <data name="convoy_intro_3" xml:space="preserve">
    <value>A blue dot on the map shows its position.</value>
  </data>
  <data name="desert_intro_1" xml:space="preserve">
    <value>In this task you drive a motorcycle.</value>
  </data>
  <data name="desert_intro_2" xml:space="preserve">
    <value>There are 2 routes.</value>
  </data>
  <data name="desert_intro_3" xml:space="preserve">
    <value>The normal route leads over roads and the highway</value>
  </data>
  <data name="desert_intro_4" xml:space="preserve">
    <value>The alternative route leads through the desert.</value>
  </data>
  <data name="desert_intro_5" xml:space="preserve">
    <value>The latter is marked by red checkpoints.</value>
  </data>
  <data name="intro1" xml:space="preserve">
    <value>GTA V is an open world action game.</value>
  </data>
  <data name="intro10" xml:space="preserve">
    <value>This might result in hostile action from bystanders ...</value>
  </data>
  <data name="intro11" xml:space="preserve">
    <value>or persecution by the police.</value>
  </data>
  <data name="intro12" xml:space="preserve">
    <value>Your wanted level is shown on the top right of the screen.</value>
  </data>
  <data name="intro13" xml:space="preserve">
    <value>Higher wanted level = more police</value>
  </data>
  <data name="intro14" xml:space="preserve">
    <value>Collisions will damage your car.</value>
  </data>
  <data name="intro15" xml:space="preserve">
    <value>When the car's hitpoints drop to 0, it will explode.</value>
  </data>
  <data name="intro16" xml:space="preserve">
    <value>When the character's hitpoints drop to 0, he will fall unconscious.</value>
  </data>
  <data name="intro17" xml:space="preserve">
    <value>The car is controlled with the steering wheel and gas/brake pedal.</value>
  </data>
  <data name="intro18" xml:space="preserve">
    <value>There are no blinkers. Just turn.</value>
  </data>
  <data name="intro19" xml:space="preserve">
    <value>To reverse, stand on the brake pedal after the car has stopped</value>
  </data>
  <data name="intro2" xml:space="preserve">
    <value>This study focusses on the singleplayer mode of the game.</value>
  </data>
  <data name="intro20" xml:space="preserve">
    <value>Hold the steering wheel turned to flip the car back over.</value>
  </data>
  <data name="intro21" xml:space="preserve">
    <value>You now have 10min. to get familiar with the game.</value>
  </data>
  <data name="intro22" xml:space="preserve">
    <value>You can drive wherever you want.</value>
  </data>
  <data name="intro23" xml:space="preserve">
    <value>To start immediately, drive through the checkpoints.</value>
  </data>
  <data name="intro3" xml:space="preserve">
    <value>You control one of these three player characters.</value>
  </data>
  <data name="intro4" xml:space="preserve">
    <value>All of the tasks revolve around a driving task.</value>
  </data>
  <data name="intro5" xml:space="preserve">
    <value>You will spend most of the time in a car.</value>
  </data>
  <data name="intro6" xml:space="preserve">
    <value>Drive through these checkpoints.</value>
  </data>
  <data name="intro7" xml:space="preserve">
    <value>The route is displayed on the minimap.</value>
  </data>
  <data name="intro8" xml:space="preserve">
    <value>You can either adhere to the traffic rules or ignore them.</value>
  </data>
  <data name="intro9" xml:space="preserve">
    <value>It is possible to run over pedestrians.</value>
  </data>
  <data name="racessetup" xml:space="preserve">
    <value>All races are set up.</value>
  </data>
  <data name="startracepromp" xml:space="preserve">
    <value>Press [F10] to start first race</value>
  </data>
</root>