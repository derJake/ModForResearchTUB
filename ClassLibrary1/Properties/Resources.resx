<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cam_designer_active" xml:space="preserve">
    <value>Cam Designer active: {0}</value>
  </data>
  <data name="checkpoint_reached" xml:space="preserve">
    <value>checkpoint {0}/{1} reached</value>
  </data>
  <data name="convoy_intro_1" xml:space="preserve">
    <value>In this task you will follow the other transporter.</value>
  </data>
  <data name="convoy_intro_2" xml:space="preserve">
    <value>Try to stay close to it!</value>
  </data>
  <data name="convoy_intro_3" xml:space="preserve">
    <value>A blue dot on the map shows its position.</value>
  </data>
  <data name="desert_intro_1" xml:space="preserve">
    <value>In this task you drive a motorcycle.</value>
  </data>
  <data name="desert_intro_2" xml:space="preserve">
    <value>There are 2 possible routes.</value>
  </data>
  <data name="desert_intro_3" xml:space="preserve">
    <value>The normal route leads over roads and the highway</value>
  </data>
  <data name="desert_intro_4" xml:space="preserve">
    <value>The alternative route leads through the desert.</value>
  </data>
  <data name="desert_intro_5" xml:space="preserve">
    <value>The latter is marked by red checkpoints.</value>
  </data>
  <data name="intro1" xml:space="preserve">
    <value>GTA V is an open world action game.</value>
  </data>
  <data name="intro10" xml:space="preserve">
    <value>This might result in hostile action from bystanders ...</value>
  </data>
  <data name="intro11" xml:space="preserve">
    <value>or persecution by the police.</value>
  </data>
  <data name="intro12" xml:space="preserve">
    <value>Your wanted level is shown on the top right of the screen.</value>
  </data>
  <data name="intro13" xml:space="preserve">
    <value>Higher wanted level = more police</value>
  </data>
  <data name="intro14" xml:space="preserve">
    <value>Collisions will damage your car.</value>
  </data>
  <data name="intro15" xml:space="preserve">
    <value>When the car's hitpoints drop to 0, it will explode.</value>
  </data>
  <data name="intro16" xml:space="preserve">
    <value>When the character's hitpoints drop to 0, he will fall unconscious.</value>
  </data>
  <data name="intro17" xml:space="preserve">
    <value>The car is controlled with the steering wheel and gas/brake pedal.</value>
  </data>
  <data name="intro18" xml:space="preserve">
    <value>There are no blinkers. Just turn.</value>
  </data>
  <data name="intro19" xml:space="preserve">
    <value>To reverse, stand on the brake pedal after the car has stopped</value>
  </data>
  <data name="intro2" xml:space="preserve">
    <value>This study focusses on the singleplayer mode of the game.</value>
  </data>
  <data name="intro20" xml:space="preserve">
    <value>Hold the steering wheel turned to flip the car back over.</value>
  </data>
  <data name="intro21" xml:space="preserve">
    <value>You now have 10min. to get familiar with the game.</value>
  </data>
  <data name="intro22" xml:space="preserve">
    <value>You can drive wherever you want.</value>
  </data>
  <data name="intro23" xml:space="preserve">
    <value>To start immediately, drive through the checkpoints.</value>
  </data>
  <data name="intro3" xml:space="preserve">
    <value>You control one of these three player characters.</value>
  </data>
  <data name="intro4" xml:space="preserve">
    <value>All of the tasks revolve around a driving task.</value>
  </data>
  <data name="intro5" xml:space="preserve">
    <value>You will spend most of the time in a car.</value>
  </data>
  <data name="intro6" xml:space="preserve">
    <value>Drive through these checkpoints.</value>
  </data>
  <data name="intro7" xml:space="preserve">
    <value>The route is displayed on the minimap.</value>
  </data>
  <data name="intro8" xml:space="preserve">
    <value>You can either adhere to the traffic rules or ignore them.</value>
  </data>
  <data name="intro9" xml:space="preserve">
    <value>It is possible to run over pedestrians.</value>
  </data>
  <data name="language_selected" xml:space="preserve">
    <value>Language selected: </value>
  </data>
  <data name="last_race" xml:space="preserve">
    <value>This was the last task!</value>
  </data>
  <data name="menu_english" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="menu_german" xml:space="preserve">
    <value>German</value>
  </data>
  <data name="menu_languages" xml:space="preserve">
    <value>Available languages</value>
  </data>
  <data name="menu_not_during_task" xml:space="preserve">
    <value>This can't be done during tasks.</value>
  </data>
  <data name="menu_toggle_cam_designer" xml:space="preserve">
    <value>Activate Cam Designer?</value>
  </data>
  <data name="menu_toggle_debug" xml:space="preserve">
    <value>Toggle debug mode?</value>
  </data>
  <data name="menu_toggle_route_designer" xml:space="preserve">
    <value>Toggle route designer?</value>
  </data>
  <data name="racessetup" xml:space="preserve">
    <value>All races are set up.</value>
  </data>
  <data name="race_finished" xml:space="preserve">
    <value>Task finished! - Time: {0}s</value>
  </data>
  <data name="race_started" xml:space="preserve">
    <value>Started task {0}/{1}</value>
  </data>
  <data name="startracepromp" xml:space="preserve">
    <value>Press [F10] to start first race</value>
  </data>
  <data name="task_started" xml:space="preserve">
    <value>The task has started!</value>
  </data>
  <data name="carvscar_initialization" xml:space="preserve">
    <value>Car vs. Car Initialization</value>
  </data>
  <data name="convoy_initialization" xml:space="preserve">
    <value>Convoy Task Initialization</value>
  </data>
  <data name="convoy_warning" xml:space="preserve">
    <value>~r~Don't lose the other truck!</value>
  </data>
  <data name="debug_mode_active" xml:space="preserve">
    <value>~r~debug mode: ~b~{0}</value>
  </data>
  <data name="desert_initialization" xml:space="preserve">
    <value>Desert Initialization</value>
  </data>
  <data name="route_designer_active" xml:space="preserve">
    <value>~r~route designer active: ~b~{0}</value>
  </data>
  <data name="suburban_initialization" xml:space="preserve">
    <value>Suburban Initialization</value>
  </data>
  <data name="carvscar_intro_1" xml:space="preserve">
    <value>For this task you choose between these two cars.</value>
  </data>
  <data name="carvscar_intro_2" xml:space="preserve">
    <value>One is a race car, that is locked.</value>
  </data>
  <data name="carvscar_intro_3" xml:space="preserve">
    <value>Its alarm will alert the police.</value>
  </data>
  <data name="carvscar_intro_4" xml:space="preserve">
    <value>It is faster, but more difficult to drive.</value>
  </data>
  <data name="carvscar_intro_5" xml:space="preserve">
    <value>This regular car is unlocked.</value>
  </data>
  <data name="carvscar_intro_6" xml:space="preserve">
    <value>You won't get a wanted level, if you choose it.</value>
  </data>
  <data name="suburban_intro_1" xml:space="preserve">
    <value>This task will be a short drive through the neighbourhood.</value>
  </data>
  <data name="suburban_intro_2" xml:space="preserve">
    <value>The streets might be busy with cars.</value>
  </data>
  <data name="suburban_intro_3" xml:space="preserve">
    <value>Your car is rather fast, despite looks.</value>
  </data>
  <data name="intro_5_1" xml:space="preserve">
    <value>The tasks last from 1 to about 3min.</value>
  </data>
  <data name="average_speed" xml:space="preserve">
    <value>The average speed of the player's vehicle (possibly in m/s)</value>
  </data>
  <data name="brake_in_front_of_garbage_truck" xml:space="preserve">
    <value>How long did the player apply the brakes before the garbage truck</value>
  </data>
  <data name="car_health" xml:space="preserve">
    <value>How many hitpoints did the player's vehicle have after the task</value>
  </data>
  <data name="distance_leader_target" xml:space="preserve">
    <value>How far away was the leading vehicle from its target when player reached the last checkpoint</value>
  </data>
  <data name="duration_against_traffic" xml:space="preserve">
    <value>How long did the player drive against traffic</value>
  </data>
  <data name="duration_brake" xml:space="preserve">
    <value>How long was the brake pedal applied overall</value>
  </data>
  <data name="duration_handbrake" xml:space="preserve">
    <value>How long was the handbrake applied overall</value>
  </data>
  <data name="duration_on_pavement" xml:space="preserve">
    <value>How long did the player drive on pavement</value>
  </data>
  <data name="duration_player_leads" xml:space="preserve">
    <value>How long was the player in front of the leading vehicle</value>
  </data>
  <data name="maximum_speed" xml:space="preserve">
    <value>The maximum speed of the player's vehicle (possibly in m/s)</value>
  </data>
  <data name="obstacle_visible" xml:space="preserve">
    <value>When was the garbage truck visible to the player</value>
  </data>
  <data name="pedestrian_collisions" xml:space="preserve">
    <value>How many times did the player collide with pedestrians</value>
  </data>
  <data name="player_health" xml:space="preserve">
    <value>How many hitpoints did the player's character have after the task</value>
  </data>
  <data name="player_passed_garbage_truck" xml:space="preserve">
    <value>Did the player drive past the garbage truck</value>
  </data>
  <data name="possible_vc_mean_distance" xml:space="preserve">
    <value>How far away were nearby vehicles on average</value>
  </data>
  <data name="possible_vehicle_collisions" xml:space="preserve">
    <value>How many cars were in a radius around the player, providing the possibility for collision</value>
  </data>
  <data name="task_end_time" xml:space="preserve">
    <value>The GameTime the task was finished at</value>
  </data>
  <data name="task_start_time" xml:space="preserve">
    <value>The GameTime the task started at</value>
  </data>
  <data name="task_total_time" xml:space="preserve">
    <value>How long it took the player to finish the task</value>
  </data>
  <data name="times_against_traffic" xml:space="preserve">
    <value>How many times did the player drive against traffic</value>
  </data>
  <data name="times_braked" xml:space="preserve">
    <value>How many times was the brake pressed</value>
  </data>
  <data name="times_handbraked" xml:space="preserve">
    <value>How many times was the handbrake used</value>
  </data>
  <data name="times_on_pavement" xml:space="preserve">
    <value>How many times did the player drive on the pavement</value>
  </data>
  <data name="times_player_leads" xml:space="preserve">
    <value>How many times did player take over the leading vehicle</value>
  </data>
  <data name="upside_down" xml:space="preserve">
    <value>How many times was the player's vehicle upside down</value>
  </data>
  <data name="vehicle_collisions" xml:space="preserve">
    <value>How many times did the player collide with other vehicles</value>
  </data>
  <data name="route_designer_alt_cp" xml:space="preserve">
    <value>press Y to add an alternative waypoint</value>
  </data>
  <data name="route_designer_reg_cp" xml:space="preserve">
    <value>press X to toggle a waypoint</value>
  </data>
</root>